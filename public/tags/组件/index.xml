<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>组件 on 子舒的博客</title>
    <link>https://zburu.com/tags/%E7%BB%84%E4%BB%B6/</link>
    <description>Recent content in 组件 on 子舒的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Jan 2021 20:46:00 +0000</lastBuildDate><atom:link href="https://zburu.com/tags/%E7%BB%84%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于 React 的富文本编辑器－－Braft Editor</title>
      <link>https://zburu.com/archives/44.html/</link>
      <pubDate>Thu, 07 Jan 2021 20:46:00 +0000</pubDate>
      
      <guid>https://zburu.com/archives/44.html/</guid>
      <description>最近发了很多关于 React 的文章，记录遇到的新技术点，以及在写代码过程中遇到的问题，希望可以帮助到和我遇到同样问题的同学。
今天分享的是一款基于 React 的富文本编辑器－－Braft Editor。
Braft Editor 官网：https://braft.margox.cn Github 仓库地址：https://github.com/margox/braft-editor
这款插件非常方便，只需要下载然后引入即可直接使用，页面整体风格清新，符合绝大多数人的审美观，支持图片，音视频的插入。
按照官方的说法，假如你对它的功能还不够满意，不够使用，完全可以扩展它，自己写一个插件来强化他。
经过我的测试，功能绝对强大，可以满足市面上绝大多数的需求。接下来就说一下如何使用这款插件。
1.安装 在项目中直接通过 npm 或者 yarn 下载插件：
# 使用 npm 安装 npm install braft-editor --save # 使用 yarn 安装 yarn add braft-editor 2.使用 新建一个组件 EditorDemo.js，在里面写入下列代码：
// EditorDemo.js import React from &amp;#39;react&amp;#39;; import BraftEditor from &amp;#39;braft-editor&amp;#39;; import &amp;#39;braft-editor/dist/index.css&amp;#39;; export default class PageDemo extends React.Component { state = { editorState: BraftEditor.createEditorState(null) } render () { return ( &amp;lt;BraftEditor value={this.</description>
    </item>
    
    <item>
      <title>React －－万物皆可组件</title>
      <link>https://zburu.com/archives/37.html/</link>
      <pubDate>Mon, 21 Dec 2020 13:19:00 +0000</pubDate>
      
      <guid>https://zburu.com/archives/37.html/</guid>
      <description>一、React 组件是什么？ 组件，从概念上类似于 javascript 函数，他接受任意入参（props），并返回作用于描述页面展示内容的 React 元素。
组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。
1.创建一个组件 // 函数组件 function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } // class组件 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } 2.渲染组件 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;; } } ReactDOM.render( &amp;lt;Welcome /&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;) ); 3.组件 React的基础原则有三条，分别是：
React 界面完全由数据驱动 React 中一切都是组件 props 是 React 组件之间通讯的基本方式 给组件输入一个参数，最终返回一个 React Element,React Element 就是在页面上展示的内容，相当于一个 DOM 节点
React 一大核心就是－－万物皆可组件</description>
    </item>
    
  </channel>
</rss>
